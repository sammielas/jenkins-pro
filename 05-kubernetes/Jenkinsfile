pipeline {
    agent any

    environment {
        IMAGE_NAME = 'sammielas/jenkins-flask-app'
        IMAGE_TAG = "${IMAGE_NAME}:${env.GIT_COMMIT}"
        KUBECONFIG = credentials('KUBECONFIG')
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        
    }

    
    stages {
        stage('Setup') {
            steps {
                sh 'ls -la $KUBECONFIG'
                sh 'chmod 644 $KUBECONFIG'
                sh 'ls -la $KUBECONFIG'
                // sh "pip install -r requirements.txt"
            }
        }
        // stage('Test') {
        //     steps {
        //         sh "pytest"
        //     }
        // }

        stage('Login to docker hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                sh 'echo ${PASSWORD} | docker login -u ${USERNAME} --password-stdin'}
                echo 'Login successfully'
            }
        }

        stage('Build Docker Image')
        {
            steps
            {
                sh 'docker build -t ${IMAGE_TAG} 05-kubernetes'
                echo "Docker image build successfully"
                sh 'docker image ls'
                
            }
        }

        stage('Push Docker Image')
        {
            steps
            {
                sh 'docker push ${IMAGE_TAG}'
                echo "Docker image push successfully"
            }
        }

        stage('Deploy to Staging')
        {
            steps {
                sh 'kubectl config use-context teraaform-user@demo-cluster.us-east-1.eksctl.io'
                sh 'kubectl config current-context'
                sh "kubectl set image deployment/flask-app flask-app=${IMAGE_TAG}"
            }
        }

        // stage('Acceptance Test')
        // {
        //     steps {

        //         script {

        //             def service = sh(script: "kubectl get svc flask-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}:{.spec.ports[0].port}'", returnStdout: true).trim()
        //             echo "${service}"

        //             sh "k6 run -e SERVICE=${service} acceptance-test.js"
        //         }
        //     }
        // }
        // stage('Deploy to Prod')
        // {
        //     steps {
        //         sh 'kubectl config use-context user@prod.us-east-1.eksctl.io'
        //         sh 'kubectl config current-context'
        //         sh "kubectl set image deployment/flask-app flask-app=${IMAGE_TAG}"
        //     }
        // }       
            stage('Deploy Service') {
            steps {
                echo "Deploying Flask App Service..."
                sh 'kubectl apply -f 05-kubernetes/k8s/flask-app-service.yaml'
            }
        }

        stage('Get Service URL') {
            steps {
                script {
                    echo "Waiting for LoadBalancer external IP..."
                    def externalIP = ""

                    for (int i = 0; i < 10; i++) {  // Retry up to 10 times (10s intervals)
                        sleep(10)
                        externalIP = sh(script: "kubectl get svc flask-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'", returnStdout: true).trim()

                        if (externalIP) {
                            break
                        }
                    }

                    if (!externalIP) {
                        error("Failed to get LoadBalancer external IP")
                    }

                    echo "âœ… Flask App is available at: http://${externalIP}:5000"
                }
            }
        
    }
}
}